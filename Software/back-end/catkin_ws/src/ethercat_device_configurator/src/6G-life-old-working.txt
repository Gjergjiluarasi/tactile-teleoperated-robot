#include "ethercat_device_configurator/EthercatDeviceConfigurator.hpp"

#ifdef _ANYDRIVE_FOUND_
#include <anydrive/Anydrive.hpp>
#endif
#ifdef _ELMO_FOUND_
#include <elmo_ethercat_sdk/Elmo.hpp>
#endif
#ifdef _MAXON_FOUND_
#include <maxon_epos_ethercat_sdk/Maxon.hpp>
#endif
#ifdef _ROKUBI_FOUND_
#include <rokubimini_rsl_ethercat/RokubiminiEthercat.hpp>
#endif
#include <csignal>
#include <thread>

#include "udpUtils.hh"
#define MAX_SIZE 255
#define MAX_RAD_PER_SEC 80.0 / 60.0 * 2.0 * M_PI
#define MIN_RAD_PER_SEC -80.0 / 60.0 * 2.0 * M_PI
#define MOTOR_ENDOWRIST_PULLEY_RADIUS 0.048// 0.008 // m

std::unique_ptr<std::thread> controller_thread;
std::unique_ptr<std::thread> worker_thread;
bool abrt = false;

EthercatDeviceConfigurator::SharedPtr configurator;

unsigned int counter = 0;

// Controller function
void controller(bool* startFlag, bool* startMove, double* dq0, double* dq1, double* dq2, double* dq3) {
    *dq0 = 0.0;
    *dq1 = 0.0;
    *dq2 = 0.0;
    *dq3 = 0.0;
    UdpClientServer::UdpServer trajectoryServer("192.16.0.1", 8080);
    double hapticConsoleMessage[21];
    *startMove = true;
    std::cout << "Starting controller thread\n";
    double t = 0.0;
    while (true) {
        if (trajectoryServer.recv(hapticConsoleMessage, MAX_SIZE)) {
            *dq0 = std ::max(MIN_RAD_PER_SEC, std::min(MAX_RAD_PER_SEC, hapticConsoleMessage[7]));
            *dq1 = std ::max(MIN_RAD_PER_SEC, std::min(MAX_RAD_PER_SEC, hapticConsoleMessage[8]));
            *dq2 = std ::max(MIN_RAD_PER_SEC, std::min(MAX_RAD_PER_SEC, hapticConsoleMessage[9]));
            *dq3 = std ::max(MIN_RAD_PER_SEC, std::min(MAX_RAD_PER_SEC, hapticConsoleMessage[10]/(MOTOR_ENDOWRIST_PULLEY_RADIUS)));
        }
        // *dq0 += 0.001;
        // *dq1 += 0.001;
        // *dq2 += 0.001;
        // *dq3 += 0.001;
        // if (*dq0 == 1.0) *dq0 = 0.0;
        // if (*dq1 == 1.0) *dq1 = 0.0;
        // if (*dq2 == 1.0) *dq2 = 0.0;
        // if (*dq3 == 1.0) *dq3 = 0.0;
        // *dq0 = 2.0 * sin(2.0 * M_PI / 1000.0 * t);
        // *dq1 = 2.0 * sin(2.0 * M_PI / 1000.0 * t);
        // *dq2 = 2.0 * sin(2.0 * M_PI / 1000.0 * t);
        // *dq3 = 2.0 * sin(2.0 * M_PI / 1000.0 * t);
        // t++;
        // usleep(1000);
        // cout << "dq0 = " << *dq0 << ", "
        //      << "dq1 = " << *dq1 << ", "
        //      << "dq2 = " << *dq2 << ", "
        //      << "dq3 = " << *dq3 << "\n";
        // if (*dq0 == 5.0) *dq0 = -1.0;
        // if (*dq1 == 2.0) *dq1 = -2.0;
        // if (*dq2 == 5.0) *dq2 = -1.0;
        // if (*dq3 == 2.0) *dq3 = -2.0;
        // *dq2 = Haptic
        // usleep(100000);
    }
}

void worker(bool* startFlag, bool* startMove, double* dq0, double* dq1, double* dq2, double* dq3) {
    bool rtSuccess = true;
    for (const auto& master : configurator->getMasters()) {
        rtSuccess &= master->setRealtimePriority(99);
    }
    std::cout << "Setting RT Priority: " << (rtSuccess ? "successful." : "not successful. Check user privileges.")
              << std::endl;

    // Flag to set the drive state for the elmos on first startup
#ifdef _ELMO_FOUND_
    bool elmoEnabledAfterStartup = false;
#endif
    // Flag to set the drive state for the elmos on first startup
#ifdef _MAXON_FOUND_
    bool maxonEnabledAfterStartup = false;
    // bool maxonOperational = false;
#endif
    /*
    ** The communication update loop.
    ** This loop is supposed to be executed at a constant rate.
    ** The EthercatMaster::update function incorporates a mechanism
    ** to create a constant rate.
    */
    while (!abrt) {
        auto start_time = std::chrono::steady_clock::now();
        /*
        ** Update each master.
        ** This sends tha last staged commands and reads the latest readings over EtherCAT.
        ** The StandaloneEnforceRate update mode is used.
        ** This means that average update rate will be close to the target rate (if possible).
        */
        for (const auto& master : configurator->getMasters()) {
            master->update(ecat_master::UpdateMode::StandaloneEnforceRate);  // TODO fix the rate compensation (Elmo
                                                                             // reliability problem)!!
        }

        /*
        ** Do things with the attached devices.
        ** Your lowlevel control input / measurement logic goes here.
        ** Different logic can be implemented for each device.
        */
        for (const auto& slave : configurator->getSlaves()) {
            // Anydrive
            if (configurator->getInfoForSlave(slave).type == EthercatDeviceConfigurator::EthercatSlaveType::Anydrive) {
#ifdef _ANYDRIVE_FOUND_
                anydrive::AnydriveEthercatSlave::SharedPtr any_slave_ptr =
                    std::dynamic_pointer_cast<anydrive::AnydriveEthercatSlave>(slave);

                if (any_slave_ptr->getActiveStateEnum() == anydrive::fsm::StateEnum::ControlOp) {
                    anydrive::Command cmd;
                    cmd.setModeEnum(anydrive::mode::ModeEnum::MotorVelocity);
                    cmd.setMotorVelocity(10);

                    any_slave_ptr->setCommand(cmd);
                }
#endif

            }
            // Rokubi
            else if (configurator->getInfoForSlave(slave).type ==
                     EthercatDeviceConfigurator::EthercatSlaveType::Rokubi) {
#ifdef _ROKUBI_FOUND_
                std::shared_ptr<rokubimini::ethercat::RokubiminiEthercat> rokubi_slave_ptr =
                    std::dynamic_pointer_cast<rokubimini::ethercat::RokubiminiEthercat>(slave);
                // Do things with the Rokubi sensors here
#endif
            }

            // Elmo
            else if (configurator->getInfoForSlave(slave).type == EthercatDeviceConfigurator::EthercatSlaveType::Elmo) {
#ifdef _ELMO_FOUND_
                std::shared_ptr<elmo::Elmo> elmo_slave_ptr = std::dynamic_pointer_cast<elmo::Elmo>(slave);
                if (!elmoEnabledAfterStartup)
                    // Set elmos to operation enabled state, do not block the call!
                    elmo_slave_ptr->setDriveStateViaPdo(elmo::DriveState::OperationEnabled, false);
                // set commands if we can
                if (elmo_slave_ptr->lastPdoStateChangeSuccessful() &&
                    elmo_slave_ptr->getReading().getDriveState() == elmo::DriveState::OperationEnabled) {
                    elmo::Command command;
                    command.setTargetVelocity(50);
                    elmo_slave_ptr->stageCommand(command);
                } else {
                    MELO_WARN_STREAM("Elmo '" << elmo_slave_ptr->getName()
                                              << "': " << elmo_slave_ptr->getReading().getDriveState());
                    // elmo_slave_ptr->setDriveStateViaPdo(elmo::DriveState::OperationEnabled, false);
                }
                auto reading = elmo_slave_ptr->getReading();
                // std::cout << "Elmo '" << elmo_slave_ptr->getName() << "': "
                //                 << "velocity: " << reading.getActualVelocity() << " rad/s\n";
#endif
            }
            // Maxon
            else if (configurator->getInfoForSlave(slave).type ==
                     EthercatDeviceConfigurator::EthercatSlaveType::Maxon) {
#ifdef _MAXON_FOUND_

                // Keep constant update rate
                // auto start_time = std::chrono::steady_clock::now();

                std::shared_ptr<maxon::Maxon> maxon_slave_ptr = std::dynamic_pointer_cast<maxon::Maxon>(slave);

                if (!maxonEnabledAfterStartup) {
                    // Set maxons to operation enabled state, do not block the call!
                    maxon_slave_ptr->setDriveStateViaPdo(maxon::DriveState::OperationEnabled, false);
                }

                // set commands if we can

                if (maxon_slave_ptr->lastPdoStateChangeSuccessful() &&
                    maxon_slave_ptr->getReading().getDriveState() == maxon::DriveState::OperationEnabled) {
                    maxon::Command command;
                    // command.setModeOfOperation(maxon::ModeOfOperationEnum::CyclicSynchronousTorqueMode);
                    command.setModeOfOperation(maxon::ModeOfOperationEnum::CyclicSynchronousVelocityMode);
                    auto reading = maxon_slave_ptr->getReading();
                    if (maxon_slave_ptr->getName() == "Maxon0")
                        command.setTargetVelocity(*dq0);  // reading.getActualVelocity());
                    else if (maxon_slave_ptr->getName() == "Maxon1")
                        command.setTargetVelocity(*dq1);  // reading.getActualVelocity());
                    else if (maxon_slave_ptr->getName() == "Maxon2")
                        command.setTargetVelocity(*dq2);  // reading.getActualVelocity());
                    else if (maxon_slave_ptr->getName() == "Maxon3") {
                        command.setTargetVelocity(*dq3);  // reading.getActualVelocity());
                        printf("Actual velocity: %.3lf\n", reading.getActualVelocity());
                    } else
                        std::cout << "Wrong slave name\n";

                    maxon_slave_ptr->stageCommand(command);
                } else {
                    MELO_WARN_STREAM("Maxon '" << maxon_slave_ptr->getName()
                                               << "': " << maxon_slave_ptr->getReading().getDriveState());
                }

                // std::this_thread::sleep_until(start_time + std::chrono::microseconds(1));
#endif
            }
            // Constant update rate
            std::this_thread::sleep_until(start_time + std::chrono::microseconds(980));
            auto const delta_time = std::chrono::steady_clock::now() - start_time;
            std::cout << "delta_time: " << ((float)delta_time.count()) / 1000000.0 << " ms\n";
        }
        counter++;
#ifdef _ELMO_FOUND_
        elmoEnabledAfterStartup = true;
#endif
#ifdef _MAXON_FOUND_
        maxonEnabledAfterStartup = true;
#endif
    }
}

/*
** Handle the interrupt signal.
** This is the shutdown routine.
** Note: This logic is executed in a thread separated from the communication update!
*/
void signal_handler(int sig) {
    /*
    ** Pre shutdown procedure.
    ** The devices execute procedures (e.g. state changes) that are necessary for a
    ** proper shutdown and that must be done with PDO communication.
    ** The communication update loop (i.e. PDO loop) continues to run!
    ** You might thus want to implement some logic that stages zero torque / velocity commands
    ** or simliar safety measures at this point using e.g. atomic variables and checking them
    ** in the communication update loop.
    */
    for (const auto& master : configurator->getMasters()) {
        master->preShutdown();
    }

    // stop the PDO communication at the next update of the communication loop
    abrt = true;

    controller_thread->join();
    worker_thread->join();

    /*
    ** Completely halt the EtherCAT communication.
    ** No online communication is possible afterwards, including SDOs.
    */
    for (const auto& master : configurator->getMasters()) {
        master->shutdown();
    }

    // Exit this executable
    std::cout << "Shutdown" << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    exit(0);
}

#ifdef _ANYDRIVE_FOUND_
// Some dummy callbacks
void anydriveReadingCb(const std::string& name, const anydrive::ReadingExtended& reading) {
    // std::cout << "Reading of anydrive '" << name << "'\n"
    //           << "Joint velocity: " << reading.getState().getJointVelocity() << "\n\n";
}
#endif
#ifdef _ROKUBI_FOUND_
void rokubiReadingCb(const std::string& name, const rokubimini::Reading& reading) {
    // std::cout << "Reading of rokubi '" << name << "'\n"
    //           << "Force X: " << reading.getForceX() << "\n\n";
}
#endif

/*
** Program entry.
** Pass the path to the setup.yaml file as first command line argument.
*/
int main(int argc, char** argv) {
    // Control variables
    double dq0_endoWrist = 0.0, dq1_endoWrist = 0.0, dq2_endoWrist = 0.0, dq3_endoWrist = 0.0;
    bool startFlag = false, startMove = false;
    // Set the abrt_ flag upon receiving an interrupt signal (e.g. Ctrl-c)
    std::signal(SIGINT, signal_handler);

    if (argc < 2) {
        std::cerr << "pass path to 'setup.yaml' as command line argument" << std::endl;
        return EXIT_FAILURE;
    }
    // a new EthercatDeviceConfigurator object (path to setup.yaml as constructor argument)
    configurator = std::make_shared<EthercatDeviceConfigurator>(argv[1]);

/*
** Add callbacks to the devices that support them.
** If you don't want to use callbacks this part can simply be left out.
** configurator->getSlavesOfType is another way of extracting only the evices
** of a ceratin type.
*/
#ifdef _ANYDRIVE_FOUND_
    for (const auto& device : configurator->getSlavesOfType<anydrive::AnydriveEthercatSlave>()) {
        device->addReadingCb(anydriveReadingCb);
    }
#endif
#if _ROKUBI_FOUND_
    for (const auto& device : configurator->getSlavesOfType<rokubimini::ethercat::RokubiminiEthercat>()) {
        device->addReadingCb(rokubiReadingCb);
    }
#endif

    /*
    ** Start all masters.
    ** There is exactly one bus per master which is also started.
    ** All online (i.e. SDO) configuration is done during this call.
    ** The EtherCAT interface is active afterwards, all drives are in Operational
    ** EtherCAT state and PDO communication may begin.
    */
    for (auto& master : configurator->getMasters()) {
        if (!master->startup()) {
            std::cerr << "Startup not successful." << std::endl;
            return EXIT_FAILURE;
        }
    }

    // Start the PDO loop in a new thread.
    controller_thread = std::make_unique<std::thread>(&controller, &startFlag, &startMove, &dq0_endoWrist,
                                                      &dq1_endoWrist, &dq2_endoWrist, &dq3_endoWrist);
    worker_thread = std::make_unique<std::thread>(&worker, &startFlag, &startMove, &dq0_endoWrist, &dq1_endoWrist,
                                                  &dq2_endoWrist, &dq3_endoWrist);

    /*
    ** Wait for a few PDO cycles to pass.
    ** Set anydrives into to ControlOp state (internal state machine, not EtherCAT states)
    */
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    for (auto& slave : configurator->getSlaves()) {
        std::cout << " " << slave->getName() << ": " << slave->getAddress() << std::endl;
#ifdef _ANYDRIVE_FOUND_
        if (configurator->getInfoForSlave(slave).type == EthercatDeviceConfigurator::EthercatSlaveType::Anydrive) {
            // Downcasting using shared pointers
            anydrive::AnydriveEthercatSlave::SharedPtr any_slave_ptr =
                std::dynamic_pointer_cast<anydrive::AnydriveEthercatSlave>(slave);
            any_slave_ptr->setFSMGoalState(anydrive::fsm::StateEnum::ControlOp, false, 0, 0);
            std::cout << "Putting slave into operational mode: " << any_slave_ptr->getName() << " : "
                      << any_slave_ptr->getAddress() << std::endl;
        }
#endif
    }

    std::cout << "Startup finished" << std::endl;

    // nothing further to do in this thread.
    pause();
}
